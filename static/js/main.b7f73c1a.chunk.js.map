{"version":3,"sources":["Avatar.js","Entrance.js","Action.js","Stats.js","Header.js","GamePage.js","App.js","reportWebVitals.js","index.js"],"names":["Avatar","props","useState","avatar","setAvatar","typeArr","subIndex","Math","floor","random","fetch","userAvaterSeed","then","res","url","makeApiCall","id","src","alt","Entrance","inputRefName","useRef","ref","type","to","onClick","setUserAvatarSeed","current","value","Action","className","handleCurrentTask","actionType","levelUpCost","level","Stats","stats","gold","hp","attack","str","def","Header","userAvatarSeed","saveGame","GamePage","currentGold","setStats","count","setCounter","goldIncrease","tick","setTick","currentTask","setCurrentTask","calculateCost","currentLevel","actions","console","log","splayer","JSON","stringify","localStorage","setItem","task","alert","useEffect","player","getItem","playerJson","parse","setPlayerSave","playerSave","loadSave","interval","setInterval","clearInterval","App","path","exact","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b7f73c1a.chunk.js","sourcesContent":["import { useState } from \"react\";\nconst Avatar = (props) =>{\n    const [avatar,setAvatar]= useState(\"\")\n    const typeArr = [\n        \"adventurer\",\n        \"adventurer-neutral\",\n        \"avataaars\",\n        \"big-ears\",\n        \"big-ears-neutral\",\n        \"big-smile\",\n        \"bottts\",\n        \"croodles\",\n        \"croodles-neutral\",\n        \"gridy\",\n        \"identicon\",\n        \"jdenticon\",\n        \"micah\",\n        \"miniavs\",\n        \"open-peeps\",\n        \"personas\",\n        \"pixel-art\",\n        \"pixel-art-neutral\",\n      ];\n      const makeApiCall = () => {\n        let subIndex = Math.floor(Math.random() * 18);\n        fetch(\n          `https://avatars.dicebear.com/api/${typeArr[subIndex]}/${props.userAvaterSeed}.svg`\n        ).then((res) => setAvatar(res.url));\n      };\n      if(!avatar){\n        makeApiCall()\n      }\n    \n    return <div id=\"avatar\">\n       <img id =\"avatar-image\" src={avatar} alt=\"whoops\" /> \n    </div>\n}\n\nexport default Avatar","import { useState, useRef } from \"react\";\nimport { Link, Route, Effect } from \"react-router-dom\";\nimport Avatar from \"./Avatar\";\n\nconst Entrance = (props) => {\n  const [userSeed, setUserSeed] = useState(\"\");\n  const [avatar, setAvatar] = useState(\"\");\n\n  const inputRefName = useRef();\n  const handleClick = () => {\n    props.setUserAvatarSeed(inputRefName.current.value);\n  };\n\n  return (\n    <div>\n      <h2 id=\"nameChoice\">Please enter your name.</h2>\n\n      <input ref={inputRefName} type=\"text\" />\n      <Link to=\"/gamePage\">\n        <button onClick={handleClick}>Create</button>\n      </Link>\n    </div>\n  );\n};\n\nexport default Entrance;\n","const Action = (props) => {\n  return (\n    <div\n      className=\"action\"\n      onClick={() => props.handleCurrentTask(props.actionType)}\n    >\n      <div>\n        <p className=\"text\">\n          <span className=\"subject\">Train</span> {props.actionType} $\n          {props.levelUpCost[props.actionType]}\n        </p>{\" \"}\n        <p className=\"text\">\n          <span\n            className=\"subject\">\n            Current Level:\n          </span>\n          {props.level}\n        </p>\n      </div>\n    </div>\n  );\n};\nexport default Action;\n","const Stats = (props) => {\n  return (\n    <div>\n      <div>Gold: {props.stats.gold}</div>\n      <div>HP: {props.stats.hp}</div>\n      <div>Attack: {props.stats.attack}</div>\n      <div>Strength: {props.stats.str}</div>\n      <div>Defence: {props.stats.def}</div>\n    </div>\n  );\n};\n\nexport default Stats;\n","\nimport { useState } from \"react\";\nimport Avatar from \"./Avatar\";\nconst Header = (props) => {\n  return (\n    <div id=\"header\">\n      <Avatar userAvatarSeed={props.userAvatarSeed} />\n      <div>\n      <p className=\"header-text\" id=\"1\">character:{props.userAvatarSeed}</p>\n      <p className=\"header-text\" id=\"2\"> gold:{props.gold}</p>\n      \n      </div>\n      <p onClick={props.saveGame} className=\"save\">save</p>\n    </div>\n  );\n};\n\nexport default Header;\n","import { useState, useRef, useEffect } from \"react\";\nimport Action from \"./Action\";\nimport Avatar from \"./Avatar\";\nimport Stats from \"./Stats\";\nimport Header from \"./Header\";\n\nconst GamePage = (props) => {\n  const [stats, setStats] = useState({\n    gold: 1,\n    attack: 1,\n    str: 1,\n    def: 1,\n    hp: 10,\n    currentGold: 100,\n  });\n  const [count, setCounter] = useState(0);\n  const loadSave = () => {\n    if (count === 0) {\n      let player = localStorage.getItem(\"player\");\n      if (player !== null) {\n        console.log(player);\n        let playerJson = JSON.parse(player);\n        props.setPlayerSave(playerJson);\n        console.log(props.playerSave);\n        console.log(playerJson);\n        setStats({\n          gold: playerJson.gold,\n          attack: playerJson.attack,\n          str: playerJson.str,\n          def: playerJson.def,\n          hp: playerJson.hp,\n          currentGold: playerJson.currentGold,\n        });\n        setCounter(1);\n      }\n    }\n  };\n\n  const goldIncrease = stats.gold * 10;\n  const levelUpBaseCost = 100;\n  const [tick, setTick] = useState(0);\n  const [currentTask, setCurrentTask] = useState(\"\");\n  const calculateCost = (currentLevel) => {\n    return currentLevel * levelUpBaseCost;\n  };\n  const levelUpCost = {\n    gold: calculateCost(stats.gold),\n    attack: calculateCost(stats.attack),\n    str: calculateCost(stats.str),\n    def: calculateCost(stats.def),\n    hp: calculateCost(stats.hp),\n  };\n  const levelGold = () => {\n    stats.gold += 1;\n    console.log(`goldIncrease ${goldIncrease}`);\n  };\n  const levelAttack = () => {\n    stats.attack += 1;\n    console.log(`attack ${stats.attack}`);\n  };\n  const levelStr = () => {\n    stats.str += 1;\n    console.log(`str ${stats.str}`);\n  };\n  const levelDef = () => {\n    stats.def += 1;\n    console.log(`def ${stats.def}`);\n  };\n  const levelHp = () => {\n    stats.hp += 1;\n    console.log(`hp ${stats.hp}`);\n  };\n  const actions = {\n    gold: levelGold,\n    attack: levelAttack,\n    str: levelStr,\n    def: levelDef,\n    hp: levelHp,\n  };\n  const saveGame = () => {\n    let splayer = JSON.stringify(stats);\n    localStorage.setItem(\"player\", splayer);\n  };\n\n  const handleCurrentTask = (task) => {\n    if (stats.currentGold >= levelUpCost[task]) {\n      stats.currentGold -= levelUpCost[task];\n      actions[task]();\n    } else {\n      alert(\n        `insufficient gold, please wait until you have enough gold and try again. it cost ${levelUpCost[task]} to level up ${task}`\n      );\n      return null;\n    }\n    if (!currentTask) {\n      setCurrentTask(task);\n    }\n  };\n\n  useEffect(() => {\n    loadSave();\n    const interval = setInterval(() => {\n      stats.currentGold += goldIncrease;\n      console.log(stats.currentGold);\n      setTick(tick + 1);\n      if(tick % 15 === 0){\n        saveGame();\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [tick, goldIncrease]);\n\n  return (\n    <div>\n      <div id=\"haha\">\n        {\" \"}\n        <Header\n          saveGame={saveGame}\n          gold={stats.currentGold}\n          userAvatarSeed={props.userAvatarSeed}\n        />\n      </div>\n\n      <div id=\"container\">\n        <div id=\"stats\">\n          <Stats stats={stats} />\n        </div>\n        <div id=\"actions\">\n          <Action\n            levelUpCost={levelUpCost}\n            level={stats.gold}\n            actionType=\"gold\"\n            handleCurrentTask={handleCurrentTask}\n          />\n          <Action\n            levelUpCost={levelUpCost}\n            level={stats.hp}\n            actionType=\"hp\"\n            handleCurrentTask={handleCurrentTask}\n          />\n          <Action\n            levelUpCost={levelUpCost}\n            level={stats.attack}\n            actionType=\"attack\"\n            handleCurrentTask={handleCurrentTask}\n          />\n          <Action\n            levelUpCost={levelUpCost}\n            level={stats.str}\n            actionType=\"str\"\n            handleCurrentTask={handleCurrentTask}\n          />\n          <Action\n            levelUpCost={levelUpCost}\n            level={stats.def}\n            actionType=\"def\"\n            handleCurrentTask={handleCurrentTask}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GamePage;\n","import { useState } from 'react';\nimport { Link, Route, Effect } from \"react-router-dom\";\nimport Entrance from './Entrance.js'\nimport GamePage from './GamePage.js';\nimport './App.css';\n\nfunction App() {\n  const[userAvatarSeed,setUserAvatarSeed] = useState(\"\")\n  const[playerSave,setPlayerSave] = useState({})\n  console.log(playerSave)\n  return (\n    <div className=\"App\">\n      \n      <Route path=\"/\" exact render={()=> !playerSave  ? <GamePage playerSave={playerSave} setPlayerSave={setPlayerSave} userAvatarSeed={userAvatarSeed}/> : <Entrance userAvatarSeed={userAvatarSeed} setUserAvatarSeed={setUserAvatarSeed}/>}/>\n\n      <Route path=\"/gamePage\" render={()=><GamePage playerSave={playerSave} setPlayerSave={setPlayerSave} userAvatarSeed={userAvatarSeed}/>}/>\n    </div>\n  );\n}\n\nexport default App;\n\n\n// font-family: 'Bebas Neue', cursive;\n// font-family: 'Lato', sans-serif;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}